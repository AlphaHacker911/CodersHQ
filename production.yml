version: "3"

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: codershq_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    ports:
      - 8080:5000
    labels:
      - traefik.http.routers.apis.rule=Host(`api.codershq.ae`)
      - traefik.http.routers.apis.tls=true
      - traefik.http.routers.apis.tls.certresolver=lets-encrypt
      - traefik.port=8080
    networks:
      - chq-net
      - internal

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: codershq_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres
    networks:
      - chq-net
      - internal


  redis:
    image: redis:6

  # celeryworker:
  #   <<: *django
  #   image: codershq_production_celeryworker
  #   command: /start-celeryworker

  # celerybeat:
  #   <<: *django
  #   image: codershq_production_celerybeat
  #   command: /start-celerybeat

  # flower:
  #   <<: *django
  #   image: codershq_production_flower
  #   command: /start-flower

networks:
  chq-net:
    external: true
  internal:
    external: false